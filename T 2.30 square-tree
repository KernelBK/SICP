; T 2.30
(define (square-tree tree)
  (cond
    ((null? tree) (quote()))
    ((not (pair? tree)) (square tree))
    (else (cons (square-tree (car tree)) (square-tree (cdr tree))))
    )
  )
(define (square x) (* x x))
(define x '((1 2) 3))
#| 递归调用过程
-(cons (square-tree '(1 2)) (square-tree '(3)))
---(square-tree '(1 2)) = (1 4)
-----(square-tree 1) = 1
-----(square-tree '(2)) = (4)
-------(square-tree 2) = 4
-------(square-tree ()) = ()

---(square-tree '(3)) = (9)
-----(square-tree 3) = 9
-----(square-tree ()) = ()
|#

(define (square-tree-version2 tree)
  (map (lambda (sub-tree) ; pro
         (cond
           ((pair? sub-tree) (square-tree-version2 sub-tree))
           (else (square sub-tree))
           )
         ) tree)
  )
#|
-(square-tree-version2 '((1 2) 3)) = ((1 4) 9)
---pro (1 2) = (1 4)
-----pro 1 = 1
-----map pro (2) = (4)
-------pro 2 = 4
-------()

---map pro (3) = (9)
-----pro 3 = 9
-----()
|#








