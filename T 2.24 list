
(define (length items)
  (cond
    ((null? items) 0)
    (else (+ 1 (length (cdr items))))
    )
  )

(define list-1 '((1 2) (3 4)))
(define x (cons (list 1 2) (list 3 4)))
;   (length list-1)
;=> 2

(define (count-leaves x)
  (cond
    ((null? x) 0)
    ((not (pair? x)) 1)
    (else (+ (count-leaves (car x)) (count-leaves (cdr x))))
    )
  )

(define list-2 (list 1 (list 2 (list 3 4))))
; T 2.24
;   list-2
;=> (1 (2 (3 4)))
   
