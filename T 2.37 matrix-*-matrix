

; T 2.37 在accumulate 基础上定义矩阵运算
(define (dot-product v w)
  (accumulate + 0 (map * v w))
  )

(define (matrix-*-vector m v)
  (map (lambda (vec) (dot-product vec v)) m)
  )
; m ((1 2 3 4) (5 6 7 2) (3 2 5 4)) v (1 2 3 4)
(define m '((1 2 3 4) (5 6 7 2) (3 2 5 4)))
(define v '(1 2 3 4))
(define n '((1 1 2) (2 2 1) (3 1 1) (1 1 1)))

(define (transpose mat)
  (accumulate-n cons () mat)
  )

(define (matrix-*-matrix m n)
  (define cols (transpose n))
  (map (lambda (vec) (matrix-*-vector cols vec)) m)
  )

; 累积 构成万物
(define (accumulate-n op init seqs)
  (cond
    ((null? (car seqs)) (quote()))
    (else (cons (accumulate op init (map car seqs)) 
                (accumulate-n op init (map cdr seqs))))
    )
  )
; (accumulate-n + 0 s)
; ((1 2 3) (4 5 6) (7 8 9) (10 11 12))

#| 需要作为基础的 accumulate 过程|#
(define (square x) (* x x))
; 累加器(累加给定序列中的元素)
(define (accumulate op initial sequence)
  (cond
    ((null? sequence) initial)
    (else (op (car sequence) (accumulate op initial (cdr sequence))))
    )
  )
  
调用演示：
   (matrix-*-matrix m n)
=> ((18 12 11) (40 26 25) (26 16 17))
   (matrix-*-vector m v)
=> (30 46 38)
   (transpose m)
=> ((1 5 3) (2 6 2) (3 7 5) (4 2 4))

******
******
