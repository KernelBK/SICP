
; 有理数的表示

(define (make-rat n d) (cons n d)) ;构造分数 作为一个序对
(define (numer x) (car x)) ; get 分数的分子
(define (denom x) (cdr x)) ; get 分数的分母

; 基于此 的 有理数 加减乘除 实现

(define (add-rat x y)
  ;(/ (+ (* (numer x) (denom y)) (* (numer y) (denom x)))
       ;(* (denom x) (denom y))) ;结果是一个小数，不是分数。逻辑上不对
  (dis-rat (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x)))
            (* (denom x) (denom y))))
  )

(define (sub-rat x y) ;Q 代码基本上与 add-rat 重复，how to simply?
  (dis-rat (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x)))
            (* (denom x) (denom y))))
  )

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y)) (* (denom x) (denom y)))
  )

(define (div-rat x y)
  (make-rat (* (numer x) (denom y)) (* (denom x) (numer y)))
  )

(define (equal-rat? x y)
  (= (* (numer x) (denom y)) (* (numer y) (denom x)))
  )

(define (dis-rat x)
  (display (numer x))
  (display "/")
  (display (denom x))
  (newline)
  )

;(add-rat (make-rat 1 2) (make-rat 1 3)) 
;(sub-rat (make-rat 1 2) (make-rat 1 3)) 
;(mul-rat (make-rat 1 2) (make-rat 1 3))  => (1 . 6)
;(equal-rat? (make-rat 1 2) (make-rat 8 16))

Test:
  (add-rat (make-rat 1 2) (make-rat 1 3)) 
5/6
   (sub-rat (make-rat 1 2) (make-rat 1 3))
1/6
   (mul-rat (make-rat 1 2) (make-rat 1 3))
=> (1 . 6)
   (equal-rat? (make-rat 1 2) (make-rat 8 16))
=> #t

******

