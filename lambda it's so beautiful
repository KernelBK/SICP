;函数构建世界，我觉得scheme的λ演算太强大了。至于为什么能这样，我是不懂。
;据我所知，java是写不出这样的代码的（当然，java有它的另外的美）

∑f(n) = f(a) + ... + f(b)
!!! 求和记法的威力在于它使数学家能去处理求和的概念本身，而不只是某各特定的求和。

（integer）1 + 2 + 3 + ...
（平方和）1^2 + 2^2 + 3^2 + ...
（立方和）...
（求π）π/8 = 1/（1*3）+ 1/（5*7）+ 1/（9*11）+ ...（非常缓慢地收敛到π/8）
（定积分）∫ f(x) dx （把区间离散化）

---------下面是精彩的地方----------
在scheme中，求和可以这样抽象出来：
---------code--------
(define (identity x) x)
(define (inc n) (+ 1 n))
(define (sum-things a b)
  (cond
    ((> a b) 0)
    (else (+ (identity a) (sum-things (inc a) b)))
    )
  )
---------code--------
wow，这个抽象真是太漂亮了。
它强在哪儿？————抽象，也就代表功能强大。（一如线性代数中，对于向量空间定义的抽象化）

首先，identity 指明的是模式
x——x          求的就是 1 + 2 + 3 + ...
x——(* x x)    求得就是平方和
x——(* x x x)  求得就是立方和
对于求π，稍微麻烦点，但也简单
前两行改为：
(define (identity x) (/ 1 (* x (+ x 2))))
(define (inc n) (+ n 4))

当然，这两个函数定义完全可以用lambda（匿名函数来代替）
待续。



